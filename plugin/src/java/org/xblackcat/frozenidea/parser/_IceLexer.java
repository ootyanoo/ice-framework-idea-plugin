/* The following code was generated by JFlex 1.4.3 on 01.04.14 12:43 */

/* It's an automatically generated code. Do not modify it. */
package org.xblackcat.frozenidea.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.xblackcat.frozenidea.psi.SliceTypes;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01.04.14 12:43 from the specification file
 * <tt>_IceLexer.flex</tt>
 */
class _IceLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\1\1\7\1\0\1\1\1\7\16\4\4\0\1\1\1\0"+
    "\1\11\1\10\1\3\3\0\1\57\1\60\1\6\1\24\1\66\1\24"+
    "\1\21\1\5\1\14\7\17\2\16\1\54\1\65\1\55\1\67\1\56"+
    "\2\0\3\20\1\25\1\22\1\25\5\3\1\12\2\3\1\46\13\3"+
    "\1\63\1\2\1\64\1\0\1\3\1\0\1\30\1\35\1\37\1\27"+
    "\1\23\1\26\1\50\1\45\1\41\1\47\1\3\1\13\1\51\1\42"+
    "\1\36\1\40\1\43\1\33\1\31\1\32\1\34\1\53\1\52\1\15"+
    "\1\44\1\3\1\61\1\0\1\62\1\0\41\4\2\0\4\3\4\0"+
    "\1\3\2\0\1\4\7\0\1\3\4\0\1\3\5\0\27\3\1\0"+
    "\37\3\1\0\u01ca\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0"+
    "\1\3\21\0\160\4\5\3\1\0\2\3\2\0\4\3\10\0\1\3"+
    "\1\0\3\3\1\0\1\3\1\0\24\3\1\0\123\3\1\0\213\3"+
    "\1\0\5\4\2\0\236\3\11\0\46\3\2\0\1\3\7\0\47\3"+
    "\7\0\1\3\1\0\55\4\1\0\1\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\10\0\33\3\5\0\3\3\15\0\5\4\6\0\1\3"+
    "\4\0\13\4\5\0\53\3\37\4\4\0\2\3\1\4\143\3\1\0"+
    "\1\3\10\4\1\0\6\4\2\3\2\4\1\0\4\4\2\3\12\4"+
    "\3\3\2\0\1\3\17\0\1\4\1\3\1\4\36\3\33\4\2\0"+
    "\131\3\13\4\1\3\16\0\12\4\41\3\11\4\2\3\4\0\1\3"+
    "\5\0\26\3\4\4\1\3\11\4\1\3\3\4\1\3\5\4\22\0"+
    "\31\3\3\4\104\0\1\3\1\0\13\3\67\0\33\4\1\0\4\4"+
    "\66\3\3\4\1\3\22\4\1\3\7\4\12\3\2\4\2\0\12\4"+
    "\1\0\7\3\1\0\7\3\1\0\3\4\1\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\1\3\3\0\4\3\2\0\1\4"+
    "\1\3\7\4\2\0\2\4\2\0\3\4\1\3\10\0\1\4\4\0"+
    "\2\3\1\0\3\3\2\4\2\0\12\4\4\3\7\0\1\3\5\0"+
    "\3\4\1\0\6\3\4\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\2\3\2\0\1\4\1\0\5\4\4\0"+
    "\2\4\2\0\3\4\3\0\1\4\7\0\4\3\1\0\1\3\7\0"+
    "\14\4\3\3\1\4\13\0\3\4\1\0\11\3\1\0\3\3\1\0"+
    "\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4\1\3"+
    "\10\4\1\0\3\4\1\0\3\4\2\0\1\3\17\0\2\3\2\4"+
    "\2\0\12\4\1\0\1\3\17\0\3\4\1\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4"+
    "\1\3\7\4\2\0\2\4\2\0\3\4\10\0\2\4\4\0\2\3"+
    "\1\0\3\3\2\4\2\0\12\4\1\0\1\3\20\0\1\4\1\3"+
    "\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3"+
    "\1\0\2\3\3\0\2\3\3\0\3\3\3\0\14\3\4\0\5\4"+
    "\3\0\3\4\1\0\4\4\2\0\1\3\6\0\1\4\16\0\12\4"+
    "\11\0\1\3\7\0\3\4\1\0\10\3\1\0\3\3\1\0\27\3"+
    "\1\0\12\3\1\0\5\3\3\0\1\3\7\4\1\0\3\4\1\0"+
    "\4\4\7\0\2\4\1\0\2\3\6\0\2\3\2\4\2\0\12\4"+
    "\22\0\2\4\1\0\10\3\1\0\3\3\1\0\27\3\1\0\12\3"+
    "\1\0\5\3\2\0\1\4\1\3\7\4\1\0\3\4\1\0\4\4"+
    "\7\0\2\4\7\0\1\3\1\0\2\3\2\4\2\0\12\4\1\0"+
    "\2\3\17\0\2\4\1\0\10\3\1\0\3\3\1\0\51\3\2\0"+
    "\1\3\7\4\1\0\3\4\1\0\4\4\1\3\10\0\1\4\10\0"+
    "\2\3\2\4\2\0\12\4\12\0\6\3\2\0\2\4\1\0\22\3"+
    "\3\0\30\3\1\0\11\3\1\0\1\3\2\0\7\3\3\0\1\4"+
    "\4\0\6\4\1\0\1\4\1\0\10\4\22\0\2\4\15\0\60\3"+
    "\1\4\2\3\7\4\4\0\10\3\10\4\1\0\12\4\47\0\2\3"+
    "\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3"+
    "\1\0\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\0\4\3\1\4\2\3\6\4\1\0\2\4\1\3\2\0\5\3"+
    "\1\0\1\3\1\0\6\4\2\0\12\4\2\0\4\3\40\0\1\3"+
    "\27\0\2\4\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4"+
    "\4\0\2\4\10\3\1\0\44\3\4\0\24\4\1\0\2\4\5\3"+
    "\13\4\1\0\44\4\11\0\1\4\71\0\53\3\24\4\1\3\12\4"+
    "\6\0\6\3\4\4\4\3\3\4\1\3\3\4\2\3\7\4\3\3"+
    "\4\4\15\3\14\4\1\3\17\4\2\0\46\3\1\0\1\3\5\0"+
    "\1\3\2\0\53\3\1\0\u014d\3\1\0\4\3\2\0\7\3\1\0"+
    "\1\3\1\0\4\3\2\0\51\3\1\0\4\3\2\0\41\3\1\0"+
    "\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\17\3\1\0"+
    "\71\3\1\0\4\3\2\0\103\3\2\0\3\4\40\0\20\3\20\0"+
    "\125\3\14\0\u026c\3\2\0\21\3\1\0\32\3\5\0\113\3\3\0"+
    "\3\3\17\0\15\3\1\0\4\3\3\4\13\0\22\3\3\4\13\0"+
    "\22\3\2\4\14\0\15\3\1\0\3\3\1\0\2\4\14\0\64\3"+
    "\40\4\3\0\1\3\3\0\2\3\1\4\2\0\12\4\41\0\3\4"+
    "\2\0\12\4\6\0\130\3\10\0\51\3\1\4\1\3\5\0\106\3"+
    "\12\0\35\3\3\0\14\4\4\0\14\4\12\0\12\4\36\3\2\0"+
    "\5\3\13\0\54\3\4\0\21\4\7\3\2\4\6\0\12\4\46\0"+
    "\27\3\5\4\4\0\65\3\12\4\1\0\35\4\2\0\13\4\6\0"+
    "\12\4\15\0\1\3\130\0\5\4\57\3\21\4\7\3\4\0\12\4"+
    "\21\0\11\4\14\0\3\4\36\3\15\4\2\3\12\4\54\3\16\4"+
    "\14\0\44\3\24\4\10\0\12\4\3\0\3\3\12\4\44\3\122\0"+
    "\3\4\1\0\25\4\4\3\1\4\4\3\3\4\2\3\11\0\300\3"+
    "\47\4\25\0\4\4\u0116\3\2\0\6\3\2\0\46\3\2\0\6\3"+
    "\2\0\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\37\3"+
    "\2\0\65\3\1\0\7\3\1\0\1\3\3\0\3\3\1\0\7\3"+
    "\3\0\4\3\2\0\6\3\4\0\15\3\5\0\3\3\1\0\7\3"+
    "\16\0\5\4\32\0\5\4\20\0\2\3\23\0\1\3\13\0\5\4"+
    "\5\0\6\4\1\0\1\3\15\0\1\3\20\0\15\3\3\0\33\3"+
    "\25\0\15\4\4\0\1\4\3\0\14\4\21\0\1\3\4\0\1\3"+
    "\2\0\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\4\3\1\0\13\3\2\0\4\3\5\0\5\3"+
    "\4\0\1\3\21\0\51\3\u0a77\0\57\3\1\0\57\3\1\0\205\3"+
    "\6\0\4\3\3\4\2\3\14\0\46\3\1\0\1\3\5\0\1\3"+
    "\2\0\70\3\7\0\1\3\17\0\1\4\27\3\11\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\40\4\57\0\1\3\u01d5\0\3\3\31\0"+
    "\11\3\6\4\1\0\5\3\2\0\5\3\4\0\126\3\2\0\2\4"+
    "\2\0\3\3\1\0\132\3\1\0\4\3\5\0\51\3\3\0\136\3"+
    "\21\0\33\3\65\0\20\3\u0200\0\u19b6\3\112\0\u51cd\3\63\0\u048d\3"+
    "\103\0\56\3\2\0\u010d\3\3\0\20\3\12\4\2\3\24\0\57\3"+
    "\1\4\4\0\12\4\1\0\31\3\7\0\1\4\120\3\2\4\45\0"+
    "\11\3\2\0\147\3\2\0\4\3\1\0\4\3\14\0\13\3\115\0"+
    "\12\3\1\4\3\3\1\4\4\3\1\4\27\3\5\4\20\0\1\3"+
    "\7\0\64\3\14\0\2\4\62\3\21\4\13\0\12\4\6\0\22\4"+
    "\6\3\3\0\1\3\4\0\12\4\34\3\10\4\2\0\27\3\15\4"+
    "\14\0\35\3\3\0\4\4\57\3\16\4\16\0\1\3\12\4\46\0"+
    "\51\3\16\4\11\0\3\3\1\4\10\3\2\4\2\0\12\4\6\0"+
    "\27\3\3\0\1\3\1\4\4\0\60\3\1\4\1\3\3\4\2\3"+
    "\2\4\5\3\2\4\1\3\1\4\1\3\30\0\3\3\2\0\13\3"+
    "\5\4\2\0\3\3\2\4\12\0\6\3\2\0\6\3\2\0\6\3"+
    "\11\0\7\3\1\0\7\3\221\0\43\3\10\4\1\0\2\4\2\0"+
    "\12\4\6\0\u2ba4\3\14\0\27\3\4\0\61\3\u2104\0\u016e\3\2\0"+
    "\152\3\46\0\7\3\14\0\5\3\5\0\1\3\1\4\12\3\1\0"+
    "\15\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0"+
    "\154\3\41\0\u016b\3\22\0\100\3\2\0\66\3\50\0\15\3\3\0"+
    "\20\4\20\0\7\4\14\0\2\3\30\0\3\3\31\0\1\3\6\0"+
    "\5\3\1\0\207\3\2\0\1\4\4\0\1\3\13\0\12\4\7\0"+
    "\32\3\4\0\1\3\1\0\32\3\13\0\131\3\3\0\6\3\2\0"+
    "\6\3\2\0\6\3\2\0\3\3\3\0\2\3\3\0\2\3\22\0"+
    "\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\2\1"+
    "\2\3\2\5\1\1\14\3\1\1\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\0\1\24\2\3\2\5\2\0"+
    "\1\25\1\0\1\25\26\3\1\26\1\27\1\30\1\22"+
    "\3\3\1\5\1\25\1\0\16\3\1\31\3\3\1\32"+
    "\4\3\1\0\2\3\1\33\2\3\1\34\10\3\1\35"+
    "\1\3\1\36\1\37\7\3\1\40\1\22\1\3\1\41"+
    "\2\3\1\42\1\43\5\3\1\44\1\3\1\45\1\46"+
    "\10\3\1\47\2\3\1\50\1\51\1\52\3\3\1\53"+
    "\1\54\1\3\1\55\11\3\1\56\4\3\1\57\2\3"+
    "\1\60\2\3\1\61\1\62\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\70\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\u05b0\0\u05e8\0\70\0\70\0\70\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\70\0\u0700\0\u0738\0\70\0\u0770\0\u07a8"+
    "\0\u07e0\0\u0818\0\u0850\0\70\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\70\0\70\0\70\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\u11b8\0\340\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\340\0\u1458"+
    "\0\u1490\0\340\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0"+
    "\0\u1618\0\u1650\0\340\0\u1688\0\340\0\340\0\u16c0\0\u16f8"+
    "\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\340\0\70\0\u1848"+
    "\0\340\0\u1880\0\u18b8\0\340\0\340\0\u18f0\0\u1928\0\u1960"+
    "\0\u1998\0\u19d0\0\340\0\u1a08\0\340\0\340\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\340\0\u1c00"+
    "\0\u1c38\0\340\0\340\0\340\0\u1c70\0\u1ca8\0\u1ce0\0\340"+
    "\0\340\0\u1d18\0\340\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\340\0\u1f48\0\u1f80\0\u1fb8"+
    "\0\u1ff0\0\340\0\u2028\0\u2060\0\340\0\u2098\0\u20d0\0\340"+
    "\0\340\0\340\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\5\2\15\1\5"+
    "\1\16\1\5\1\17\1\2\1\5\1\20\1\21\1\5"+
    "\1\22\1\23\2\5\1\24\1\25\1\26\1\5\1\27"+
    "\4\5\1\30\2\5\1\31\1\5\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\71\0\1\3\5\0\1\3\63\0\1\5"+
    "\6\0\2\5\1\0\1\5\2\0\1\5\1\0\2\5"+
    "\1\0\27\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\27\5\21\0\1\47\1\50\64\0\1\51\6\0"+
    "\2\51\1\0\1\51\2\0\1\51\1\0\2\51\1\0"+
    "\27\51\14\0\2\11\1\52\4\11\1\0\1\11\1\53"+
    "\56\11\3\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\11\5\1\54\15\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\11\5\1\55\15\5\26\0\2\56\1\57"+
    "\1\60\1\61\1\57\1\0\1\62\2\63\1\0\3\64"+
    "\52\0\2\56\1\15\1\0\2\15\1\0\1\62\2\63"+
    "\1\0\3\64\54\0\1\62\1\0\2\62\53\0\2\5"+
    "\5\0\3\5\1\65\3\5\1\0\2\5\1\0\15\5"+
    "\1\66\11\5\17\0\2\5\5\0\1\5\1\67\5\5"+
    "\1\0\2\5\1\0\3\5\1\70\23\5\17\0\2\5"+
    "\5\0\7\5\1\0\2\5\1\0\11\5\1\71\2\5"+
    "\1\72\12\5\17\0\2\5\5\0\7\5\1\0\1\5"+
    "\1\73\1\0\5\5\1\74\12\5\1\75\6\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\6\5\1\76"+
    "\11\5\1\77\6\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\11\5\1\100\5\5\1\101\7\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\7\5\1\102"+
    "\17\5\17\0\2\5\5\0\1\5\1\103\5\5\1\0"+
    "\2\5\1\0\11\5\1\104\15\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\2\5\1\105\12\5\1\106"+
    "\6\5\1\107\2\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\10\5\1\110\16\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\11\5\1\111\15\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\11\5\1\112"+
    "\15\5\70\0\1\113\76\0\1\114\70\0\1\115\3\0"+
    "\7\47\1\0\60\47\6\116\1\0\61\116\7\51\1\0"+
    "\60\51\7\11\1\0\60\11\3\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\12\5\1\117\14\5\17\0\2\5"+
    "\5\0\7\5\1\0\2\5\1\0\12\5\1\120\2\5"+
    "\1\121\11\5\26\0\2\56\1\57\1\0\1\61\1\57"+
    "\1\0\1\62\2\63\1\0\3\64\54\0\1\122\1\0"+
    "\3\122\1\0\2\122\1\0\4\122\4\0\1\122\1\0"+
    "\1\122\44\0\1\61\1\0\2\61\1\0\1\62\2\63"+
    "\1\0\3\64\54\0\1\62\1\0\2\62\2\0\2\63"+
    "\1\0\3\64\54\0\1\123\1\0\2\123\4\0\1\124"+
    "\46\0\2\5\5\0\7\5\1\0\2\5\1\0\5\5"+
    "\1\125\4\5\1\126\14\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\7\5\1\127\17\5\17\0\2\5"+
    "\5\0\7\5\1\0\2\5\1\0\11\5\1\130\15\5"+
    "\17\0\2\5\5\0\1\5\1\131\5\5\1\0\2\5"+
    "\1\0\27\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\7\5\1\132\17\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\12\5\1\133\14\5\17\0\2\5"+
    "\5\0\7\5\1\0\2\5\1\0\16\5\1\134\10\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\6\5"+
    "\1\135\20\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\11\5\1\136\15\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\7\5\1\137\17\5\17\0\2\5"+
    "\5\0\7\5\1\0\2\5\1\0\6\5\1\140\20\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\11\5"+
    "\1\141\15\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\5\5\1\142\21\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\5\5\1\143\21\5\17\0\2\5"+
    "\5\0\7\5\1\0\2\5\1\0\3\5\1\144\23\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\15\5"+
    "\1\145\11\5\17\0\2\5\5\0\7\5\1\0\1\5"+
    "\1\146\1\0\27\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\5\5\1\147\21\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\13\5\1\150\13\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\22\5\1\151"+
    "\4\5\17\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\2\5\1\152\24\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\14\5\1\153\12\5\14\0\6\116\1\154"+
    "\61\116\3\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\3\5\1\155\23\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\3\5\1\156\23\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\23\5\1\157\3\5\26\0"+
    "\2\56\1\122\1\0\3\122\1\0\2\122\1\0\4\122"+
    "\4\0\1\122\1\0\1\122\44\0\1\123\1\0\2\123"+
    "\5\0\3\64\54\0\1\123\1\0\2\123\53\0\2\5"+
    "\5\0\7\5\1\0\1\5\1\160\1\0\27\5\17\0"+
    "\2\5\5\0\7\5\1\0\1\5\1\161\1\0\27\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\24\5"+
    "\1\162\2\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\3\5\1\163\23\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\4\5\1\164\22\5\17\0\2\5"+
    "\5\0\7\5\1\0\2\5\1\0\10\5\1\165\16\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\5\5"+
    "\1\166\21\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\7\5\1\167\17\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\7\5\1\170\4\5\1\171\12\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\6\5"+
    "\1\172\20\5\17\0\2\5\5\0\7\5\1\0\1\5"+
    "\1\173\1\0\27\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\11\5\1\174\15\5\17\0\2\5\5\0"+
    "\1\5\1\175\5\5\1\0\2\5\1\0\27\5\17\0"+
    "\2\5\5\0\7\5\1\0\1\5\1\176\1\0\27\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\4\5"+
    "\1\177\22\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\4\5\1\200\22\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\24\5\1\201\2\5\17\0\2\5"+
    "\5\0\7\5\1\0\1\5\1\202\1\0\27\5\17\0"+
    "\2\5\5\0\1\5\1\203\5\5\1\0\2\5\1\0"+
    "\27\5\17\0\2\5\5\0\7\5\1\0\1\5\1\204"+
    "\1\0\27\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\7\5\1\205\17\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\2\5\1\206\24\5\14\0\5\116"+
    "\1\207\1\154\61\116\3\0\2\5\5\0\1\5\1\210"+
    "\5\5\1\0\2\5\1\0\27\5\17\0\2\5\5\0"+
    "\1\5\1\211\5\5\1\0\2\5\1\0\27\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\15\5\1\212"+
    "\11\5\17\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\13\5\1\213\13\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\5\5\1\214\21\5\17\0\2\5\5\0"+
    "\7\5\1\0\1\5\1\215\1\0\27\5\17\0\2\5"+
    "\5\0\1\5\1\216\5\5\1\0\2\5\1\0\27\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\14\5"+
    "\1\217\12\5\17\0\2\5\5\0\7\5\1\0\1\5"+
    "\1\220\1\0\27\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\12\5\1\221\14\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\15\5\1\222\11\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\5\5\1\223"+
    "\21\5\17\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\25\5\1\224\1\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\4\5\1\225\22\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\5\5\1\226\21\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\13\5\1\227"+
    "\13\5\17\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\6\5\1\230\20\5\17\0\2\5\5\0\7\5\1\0"+
    "\1\5\1\231\1\0\27\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\12\5\1\232\14\5\17\0\2\5"+
    "\5\0\1\5\1\233\5\5\1\0\2\5\1\0\27\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\21\5"+
    "\1\234\5\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\2\5\1\235\24\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\5\5\1\236\21\5\17\0\2\5"+
    "\5\0\7\5\1\0\1\5\1\237\1\0\27\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\11\5\1\240"+
    "\15\5\17\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\15\5\1\241\11\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\5\5\1\242\21\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\23\5\1\243\3\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\4\5\1\244"+
    "\22\5\17\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\11\5\1\245\15\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\1\5\1\246\25\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\24\5\1\247\2\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\5\5\1\250"+
    "\21\5\17\0\2\5\5\0\7\5\1\0\1\5\1\251"+
    "\1\0\27\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\10\5\1\252\16\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\4\5\1\253\22\5\17\0\2\5"+
    "\5\0\7\5\1\0\2\5\1\0\14\5\1\254\12\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\15\5"+
    "\1\255\11\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\12\5\1\256\14\5\17\0\2\5\5\0\7\5"+
    "\1\0\2\5\1\0\5\5\1\257\21\5\17\0\2\5"+
    "\5\0\7\5\1\0\2\5\1\0\3\5\1\260\23\5"+
    "\17\0\2\5\5\0\7\5\1\0\1\5\1\261\1\0"+
    "\27\5\17\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\22\5\1\262\4\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\11\5\1\263\15\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\3\5\1\264\23\5\17\0"+
    "\2\5\5\0\7\5\1\0\1\5\1\265\1\0\27\5"+
    "\17\0\2\5\5\0\7\5\1\0\1\5\1\266\1\0"+
    "\27\5\17\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\12\5\1\267\14\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\15\5\1\270\11\5\17\0\2\5\5\0"+
    "\7\5\1\0\1\5\1\271\1\0\27\5\17\0\2\5"+
    "\5\0\7\5\1\0\2\5\1\0\15\5\1\272\11\5"+
    "\17\0\2\5\5\0\7\5\1\0\2\5\1\0\6\5"+
    "\1\273\20\5\17\0\2\5\5\0\7\5\1\0\2\5"+
    "\1\0\15\5\1\274\11\5\17\0\2\5\5\0\7\5"+
    "\1\0\1\5\1\275\1\0\27\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\5\5\1\276\21\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\12\5\1\277"+
    "\14\5\17\0\2\5\5\0\7\5\1\0\2\5\1\0"+
    "\17\5\1\300\7\5\17\0\2\5\5\0\7\5\1\0"+
    "\2\5\1\0\5\5\1\301\21\5\17\0\2\5\5\0"+
    "\7\5\1\0\2\5\1\0\4\5\1\302\22\5\17\0"+
    "\2\5\5\0\7\5\1\0\2\5\1\0\5\5\1\303"+
    "\21\5\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\24\1\6\11\2\1\3\11"+
    "\3\1\1\0\1\11\2\1\1\11\1\1\2\0\1\1"+
    "\1\0\1\11\26\1\3\11\6\1\1\0\27\1\1\0"+
    "\32\1\1\11\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _IceLexer(){
    this((java.io.Reader)null);
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }


  _IceLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _IceLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2264) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return SliceTypes.ICE_NAME_SEPARATOR;
          }
        case 53: break;
        case 50: 
          { return SliceTypes.ICE_KW_IDEMPOTENT;
          }
        case 54: break;
        case 36: 
          { return SliceTypes.ICE_KW_SHORT;
          }
        case 55: break;
        case 8: 
          { return SliceTypes.ICE_LEFT_PARENTH;
          }
        case 56: break;
        case 48: 
          { return SliceTypes.ICE_KW_INTERFACE;
          }
        case 57: break;
        case 19: 
          { return SliceTypes.ICE_DIRECTIVE;
          }
        case 58: break;
        case 40: 
          { return SliceTypes.ICE_KW_STRUCT;
          }
        case 59: break;
        case 37: 
          { return SliceTypes.ICE_KW_CLASS;
          }
        case 60: break;
        case 33: 
          { return SliceTypes.ICE_KW_LOCAL;
          }
        case 61: break;
        case 6: 
          { return SliceTypes.ICE_LT;
          }
        case 62: break;
        case 9: 
          { return SliceTypes.ICE_RIGHT_PARENTH;
          }
        case 63: break;
        case 20: 
          { return SliceTypes.ICE_STRING_LITERAL;
          }
        case 64: break;
        case 41: 
          { return SliceTypes.ICE_KW_STRING;
          }
        case 65: break;
        case 46: 
          { return SliceTypes.ICE_KW_SEQUENCE;
          }
        case 66: break;
        case 34: 
          { return SliceTypes.ICE_KW_FLOAT;
          }
        case 67: break;
        case 44: 
          { return SliceTypes.ICE_KW_MODULE;
          }
        case 68: break;
        case 10: 
          { return SliceTypes.ICE_LEFT_BRACE;
          }
        case 69: break;
        case 47: 
          { return SliceTypes.ICE_KW_EXCEPTION;
          }
        case 70: break;
        case 38: 
          { return SliceTypes.ICE_KW_CONST;
          }
        case 71: break;
        case 12: 
          { return SliceTypes.ICE_LEFT_BRACKET;
          }
        case 72: break;
        case 5: 
          { return SliceTypes.ICE_INTEGER_VALUE;
          }
        case 73: break;
        case 25: 
          { return SliceTypes.ICE_KW_OUT;
          }
        case 74: break;
        case 43: 
          { return SliceTypes.ICE_KW_OBJECT;
          }
        case 75: break;
        case 13: 
          { return SliceTypes.ICE_RIGHT_BRACKET;
          }
        case 76: break;
        case 49: 
          { return SliceTypes.ICE_KW_DICTIONARY;
          }
        case 77: break;
        case 42: 
          { return SliceTypes.ICE_KW_THROWS;
          }
        case 78: break;
        case 45: 
          { return SliceTypes.ICE_KW_EXTENDS;
          }
        case 79: break;
        case 21: 
          { return SliceTypes.ICE_FLOAT_VALUE;
          }
        case 80: break;
        case 14: 
          { return SliceTypes.ICE_SEMICOLON;
          }
        case 81: break;
        case 23: 
          { return SliceTypes.ICE_OPEN_GL_MD;
          }
        case 82: break;
        case 11: 
          { return SliceTypes.ICE_RIGHT_BRACE;
          }
        case 83: break;
        case 28: 
          { return SliceTypes.ICE_KW_ENUM;
          }
        case 84: break;
        case 3: 
          { return SliceTypes.ICE_ID;
          }
        case 85: break;
        case 18: 
          { return SliceTypes.ICE_C_STYLE_COMMENT;
          }
        case 86: break;
        case 7: 
          { return SliceTypes.ICE_GT;
          }
        case 87: break;
        case 17: 
          { return SliceTypes.ICE_END_OF_LINE_COMMENT;
          }
        case 88: break;
        case 39: 
          { return SliceTypes.ICE_KW_DOUBLE;
          }
        case 89: break;
        case 31: 
          { return SliceTypes.ICE_KW_BYTE;
          }
        case 90: break;
        case 24: 
          { return SliceTypes.ICE_CLOSE_GL_MD;
          }
        case 91: break;
        case 26: 
          { return SliceTypes.ICE_KW_INT;
          }
        case 92: break;
        case 35: 
          { return SliceTypes.ICE_KW_FALSE;
          }
        case 93: break;
        case 32: 
          { return SliceTypes.ICE_KW_VOID;
          }
        case 94: break;
        case 4: 
          { return SliceTypes.ICE_ASTERISK;
          }
        case 95: break;
        case 29: 
          { return SliceTypes.ICE_KW_TRUE;
          }
        case 96: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 97: break;
        case 15: 
          { return SliceTypes.ICE_COMA;
          }
        case 98: break;
        case 51: 
          { return SliceTypes.ICE_KW_IMPLEMENTS;
          }
        case 99: break;
        case 16: 
          { return SliceTypes.ICE_EQ;
          }
        case 100: break;
        case 30: 
          { return SliceTypes.ICE_KW_BOOL;
          }
        case 101: break;
        case 27: 
          { return SliceTypes.ICE_KW_LONG;
          }
        case 102: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 103: break;
        case 52: 
          { return SliceTypes.ICE_KW_LOCAL_OBJECT;
          }
        case 104: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
