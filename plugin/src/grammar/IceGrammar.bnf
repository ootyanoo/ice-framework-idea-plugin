{
    parserClass="org.xblackcat.frozenice.parser.SliceParser"
    parserUtilClass="org.xblackcat.frozenice.parser.SliceParserUtil"
//    stubParserClass="org.xblackcat.frozenice.parser.SliceParserUtil"

    implements="org.xblackcat.frozenice.psi.SliceCompositeElement"
    extends="org.xblackcat.frozenice.psi.impl.SliceCompositeElementImpl"

    psiClassPrefix="Slice"
    psiImplClassSuffix="Impl"
    psiPackage="org.xblackcat.frozenice.psi"
    psiImplPackage="org.xblackcat.frozenice.psi.impl"
    psiImplUtilClass="org.xblackcat.frozenice.psi.impl.SlicePsiImplUtil"

    elementTypeHolderClass="org.xblackcat.frozenice.psi.SliceTypes"
    elementTypePrefix="ICE_"
    elementTypeClass="org.xblackcat.frozenice.psi.SliceCompositeElementType"
    tokenTypeClass="org.xblackcat.frozenice.psi.SliceTokenType"


    // Tokens
    tokens=[
        id="regexp:\p{Alpha}\w*"
        string_literal="regexp:\"([^\"\\]|\\.)*\""

        EQ="="
        SEMICOLON=";"
        COMA=","
        ASTERISK="*"
        LT="<"
        GT=">"
        LEFT_BRACE="{"
        RIGHT_BRACE="}"
        LEFT_BRACKET="["
        RIGHT_BRACKET="]"
        OPEN_GL_MD="[["
        CLOSE_GL_MD="]]"
        LEFT_PARENTH="("
        RIGHT_PARENTH=")"

        KW_VOID="void"

        // Primitive data types
        KW_BOOL="bool"
        KW_BYTE="byte"
        KW_SHORT="short"
        KW_INT="int"
        KW_LONG="long"
        KW_FLOAT="float"
        KW_DOUBLE="double"

        // Simple data types
        KW_LOCAL_OBJECT="LocalObject"
        KW_STRING="string"
        KW_OBJECT="Object"

        // Composite data type declarations
        KW_CLASS="class"
        KW_EXCEPTION="exception"
        KW_INTERFACE="interface"
        KW_SEQUENCE="sequence"
        KW_STRUCT="struct"
        KW_DICTIONARY="dictionary"
        KW_ENUM="enum"

        //
        // Other keywords
        //

        // Boolean data type allowed values
        KW_FALSE="false"
        KW_TRUE="true"

        // Parameter modifier list
        KW_OUT="out"

        // Method modifier list
        KW_LOCAL="local"
        KW_IDEMPOTENT="idempotent"

        // Other keywords
        KW_MODULE="module"
        KW_CONST="const"
        KW_THROWS="throws"
        KW_EXTENDS="extends"
        KW_IMPLEMENTS="implements"
    ]

    implements("class_def|interface_def|exception_def|enum_def|struct_def|sequence_def|dictionary_def")="org.xblackcat.frozenice.psi.SliceDataTypeElement"
    extends("class_def|interface_def|exception_def|enum_def|struct_def|sequence_def|dictionary_def")="org.xblackcat.frozenice.psi.impl.SliceDataTypeElementImpl"
    implements(".*_def|module")="org.xblackcat.frozenice.psi.SliceNamedElement"
    extends(".*_def|module")="org.xblackcat.frozenice.psi.impl.SliceNamedElementImpl"
}

root ::= slice_block
private slice_block ::= (global_metadata)* (metadata)* module
module ::= 'module' id '{' module_body '}' ';' {pin=1}
private module_body ::= (module_element) * {pin(".*") = 1}

private module_element ::= (metadata)* ( module | data_definition | constant )

global_metadata ::= '[[' global_metadata_body ']]' {pin=1 recoverWhile=global_metadata_recover}
private global_metadata_body ::= metadata_element (',' metadata_element)*
private global_metadata_recover ::= !('module' | '[' | '[[')

metadata ::= '[' metadata_body ']' {pin=1 recoverWhile=metadata_recover}
private metadata_body ::= metadata_element (',' metadata_element)* {pin=1 recoverWhile=metadata_body_recover}
private metadata_recover ::= !(data_def_keywords | 'module' | '[[' | '[' )
private data_def_keywords ::= 'exception' | 'class' | 'interface' | 'struct' | 'enum' | 'sequence' | 'dictionary'

metadata_element ::= string_literal {recoverWhile=metadata_element_recover}
private metadata_body_recover ::= !(']')
private metadata_element_recover ::= !(']]' | ']' | ',')

private data_definition ::= class_def | interface_def // | exception_def | struct_def | enum_def | sequence_def | dictionary_def
private data_def_recover ::= !('module' | '[' | '[[' |  data_definition | ('}' ';'))

extends_list ::= 'extends' type_reference (',' type_reference) * {pin=1}
implements_list ::= 'implements' type_reference (',' type_reference) *  {pin=1}

// --- Class ---
class_def ::= 'class' id extends_list? implements_list? classBody? ';' {pin=1 recoverWhile=declaration_recover}
classBody ::= '{' (class_element) * '}'
private class_element ::= (field_def | method_def | constant )

private class_element_recover ::= (class_element | ('}' ';'))
private declaration_recover ::= !('[' | data_def_keywords | 'const' | '}')

// --- Interface ---
interface_def ::= 'interface' id extends_list? interface_body? ';' {pin=1 recoverWhile=declaration_recover}
interface_body ::= '{' (interface_element) * '}'
private interface_element ::= (method_def | constant ) {recoverWhile=interface_element_recover}
private interface_element_recover ::= !(interface_element | '}')

// --- Exceptions ---
private exception_def_start ::= metadata* 'exception' id
exception_def ::= exception_def_start extends_list? '{' (class_element) * '}' ';'

// --- Structures ---
private struct_def_start ::= metadata* 'struct' id
struct_def ::= struct_def_start '{' (structure_declaration) * '}' ';'
private structure_declaration ::= (field_def) * {recoverWhile=declaration_recover}

// --- Enums ---
private enum_def_start ::= metadata* 'enum' id
enum_def ::= enum_def_start '{' enum_constant_list '}' ';'
enum_constant_list ::= enum_constant (',' enum_constant) *
enum_constant ::= id {recoverWhile=enum_constant_list_recover}
private enum_constant_list_recover ::= !(',' | '}' ';')

element_type ::= data_type
key_type ::= primitive_data_types | 'string' | type_reference
// --- Sequences ---
sequence_def ::= metadata* 'sequence' '<' element_type '>' id ';'

// --- Dictionaries ---
dictionary_def ::= metadata* 'dictionary' '<' key_type ',' element_type '>' id ';'

// --- Other ---
type_reference ::= id {
    methods = [getReferences]
}
proxy_type ::= (simple_data_types | type_reference) '*'
data_type ::= proxy_type | primitive_data_types | simple_data_types | type_reference

// -- method --
method_def ::= metadata* modifier* method_return_type id '(' parameters_list ')' (throws_list)? ';' {recoverWhile=class_element_recover}
throws_list ::= 'throws' type_reference (',' type_reference) * {pin=1 recoverWhile=throws_list_recovery}
private throws_list_recovery ::= !(';')
modifier ::= 'idempotent' | 'local'
method_return_type ::= data_type | 'void'
parameters_list ::= (parameter (',' parameter) *)? {pin(".*")=1 recoverWhile=parameter_list_recovery}
parameter ::= parameter_modifier * data_type id {pin=2 recoverWhile=parameter_recovery}
parameter_modifier ::= 'out'
private parameter_list_recovery ::= !(')')
private parameter_recovery ::= !(')' | ',')

constant_value ::= (integer_value | float_value | bool_value | string_literal | type_reference)

variable_type ::= data_type

field_def ::= variable_type id ('=' constant_value )? ';' {recoverWhile=class_element_recover}

constant ::= 'const' variable_type id '=' constant_value ';' {pin=1 recoverWhile=class_element_recover}

//
// Data types
//

// Primitive data types
private primitive_data_types ::= 'float' | 'double' | 'bool' | 'byte' | 'short' | 'int' | 'long'

// Simple data types
private simple_data_types ::= 'LocalObject' | 'string' | 'Object'

// Boolean data type allowed values
private bool_value ::= 'false' | 'true'
